#include <iostream>
#include "Indice1D.h"
#include "Indice2D.h"
#include "Device.h"
#include "cudaTools.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/
__global__ void histogramDeviceMM(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto);

static __device__ void reductionIntraThread(uchar* ptrDevTabData, int nTabData, int* ptrDevHisto);
static __device__ void reductionInterBloc(int* tabSM, int* ptrDevHisto);
static __device__ void initTabSM(int* tabSM);

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
__global__ void histogramDeviceMM(int* ptrDevTabData, int nTabData, int* ptrDevHisto)
    {
    extern __shared__ int tabSM[];

    initTabSM(tabSM);
    reductionIntraThread(ptrDevTabData, nTabData, tabSM);
    __syncthreads();
    reductionInterBloc(tabSM, ptrDevHisto);
    }



/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__device__ void initTabSM(int* tabSM)
    {
    const int NB_THREAD_LOCAL = Indice2D::nbThreadLocal();
    const int TID_LOCAL = Indice2D::tidLocal();

    int s = TID_LOCAL;

    while( s < 256)
	{
	tabSM[s] = 0;
	s += NB_THREAD_LOCAL;
	}
    }

__device__ void reductionIntraThread(uchar* ptrDevTabData, int nTabData, int* tabSM)
    {
    const int NB_THREAD = Indice2D::nbThread();
    const int TID = Indice2D::tid();

    int s = TID;
    while (s < nTabData)
	{
	atomicAdd(&tabSM[ptrDevTabData[s]], 1);

	s += NB_THREAD;
	}
    }


__device__ void reductionInterBloc(int* tabSM, int* ptrDevHisto)
    {
    int s = Indice2D::tidLocal();
    int NB_THREAD_LOCAL = Indice2D::nbThreadLocal();

    while(s < 256){

	    atomicAdd(&ptrDevHisto[tabSM[s]], 1);
		s += NB_THREAD_LOCAL;
	}
    }

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

