#pragma once

#include <iostream>
#include "ReductionTools.h"
#include "CommunDevices.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/
__global__ void computePi(float* ptrDevResult, int nbSlices);
__device__ float sliceDevice(int nbSlices);

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
__global__ void computePi(float* ptrDevResult, int nbSlices)
    {
    const int NB_THREADS_LOCAL= Indice1D::nbThreadBlock();
    const int THREAD_LOCAL_ID = Indice1D::tidLocal();

    __shared__ float ptrDevArraySM[1024];

    ptrDevArraySM[THREAD_LOCAL_ID] = sliceDevice(nbSlices);

    __syncthreads();

    ReductionTools::template reductionIntraBlock<float>(ptrDevArraySM, NB_THREADS_LOCAL);
    ReductionTools::template reductionInterBlock<float>(ptrDevArraySM, ptrDevResult);
    }


__device__ float sliceDevice(int nbSlices)
    {
    const int NB_THREADS_LOCAL= Indice1D::nbThreadBlock();
    const int THREAD_LOCAL_ID = Indice1D::tidLocal();

    float dx = 1.0 / nbSlices;

    float threadSum = 0.0;
    int s = THREAD_LOCAL_ID;
    while (s < nbSlices)
	{
	threadSum += CommunDevices::calcPi(s * dx);
	s += NB_THREADS_LOCAL;
	}

    return threadSum / nbSlices;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

