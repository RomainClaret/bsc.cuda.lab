#include <iostream>

#include "cudaTools.h"
#include "Device.h"
#include "math.h"


/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/
extern __global__ void histogramDeviceMM(int* ptrDevTabData, int nTabData, int* ptrDevHisto);

bool runHistoMM(int n);
bool histogramMM(int n);

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/
int randomValueMM(int min, int max)
    {
    return (int)( (max-min) * ( (float)(rand()) / (float)RAND_MAX ) + min);
    }

bool histogramMM(int n)
    {
    return runHistoMM(n);
    }

bool runHistoMM(int n)
    {
    const int N_MAX_VALUE = 256;
    const int DG_X = N_MAX_VALUE;
    const int DG_Y = N_MAX_VALUE;

    dim3 dg = dim3(DG_X, 1, 1);
    dim3 db = dim3(DG_Y, 1, 1);
    Device::gridAssert(dg, db);

    size_t max_size = N_MAX_VALUE*sizeof(int);
    size_t n_size = n*sizeof(int);

    int* ptrInput = new int[n];
    int* ptrOut = new int[N_MAX_VALUE];

    int* ptrDevInput;
    int* ptrDevOut;


    for(int i = 0; i < n; ++i)
	{
	ptrInput[i] = i%N_MAX_VALUE;
	}

    for(int i = 0; i < N_MAX_VALUE; ++i)
	{
	ptrOut[i] = 0;
	}

    for(int i = 0; i < n; ++i)
	{
	std::swap(ptrInput[randomValueMM(0, n-1)], ptrInput[randomValueMM(0, n-1)]);
	}

    HANDLE_ERROR(cudaMalloc((void**)&ptrDevInput, n_size));
    HANDLE_ERROR(cudaMemset(ptrDevInput, 0, n_size));

    HANDLE_ERROR(cudaMalloc((void**)&ptrDevOut, max_size));
    HANDLE_ERROR(cudaMemset(ptrDevOut, 0, max_size));

    histogramDeviceMM<<<dg,db,n_size>>>(ptrDevInput, n, ptrDevOut);

    HANDLE_ERROR(cudaMemcpy(ptrInput, ptrDevInput, max_size, cudaMemcpyDeviceToHost));
    HANDLE_ERROR(cudaMemcpy(ptrOut, ptrDevOut, max_size, cudaMemcpyDeviceToHost));

    for(int i = 0; i< 256; i++)
	{
	std::cout << ptrOut[i];
	}
    std::cout << std::endl;

    //

    //
    //    HANDLE_ERROR(cudaMalloc((void**)&ptrDevInput, n_size));
    //    HANDLE_ERROR(cudaMemcpy(ptrDevInput, ptrInput, n_size, cudaMemcpyHostToDevice));
    //
    //    HANDLE_ERROR(cudaMalloc((void**)&ptrDevOut, max_size));
    //    HANDLE_ERROR(cudaMemcpy(ptrDevOut, ptrOut, max_size, cudaMemcpyHostToDevice));
    //
    //    histogramDeviceMM<<<dg, db, max_size>>>(ptrDevInput, n);
    //    //Device::checkKernelError("histogramDeviceGM");
    //
    //    HANDLE_ERROR(cudaMemcpy(ptrOut, ptrDevOut, max_size, cudaMemcpyDeviceToHost));
    //    HANDLE_ERROR(cudaFree(ptrDevOut));
    //    HANDLE_ERROR(cudaFree(ptrDevInput));

    HANDLE_ERROR(cudaFree(ptrDevOut));
    HANDLE_ERROR(cudaFree(ptrDevInput));

    Device::lastCudaError("Histogramme MM (end deallocation)"); // temp debug

    delete[] ptrInput;
    delete[] ptrOut;

    bool isOk = true;
    //    for(int i = 0; isOk && i < N_MAX_VALUE-1; ++i)
    //	{
    //	isOk &= (ptrOut[i] == ptrOut[i+1]);
    //	}
    //
    //    delete[] ptrInput;
    //    delete[] ptrOut;

    return isOk;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

