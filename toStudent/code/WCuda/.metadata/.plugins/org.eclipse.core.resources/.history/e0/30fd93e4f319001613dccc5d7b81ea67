#pragma once

#include "Indice1D.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

class ReductionTools
    {
    public:
	template<typename T>
	__device__ static void reductionIntraBlock(T* arraySM, int size)
	    {
	    const int THREAD_LOCAL_ID = Indice1D::tidLocal();
	    const int NB_THREAD_LOCAL = Indice1D::nbThread();

	    int n = size;
	    int half = size / 2;
	    while (half >= 1)
		{
		int s = TID_LOCAL;
		while (s < half)
		    {
		    arraySM[s] += arraySM[s + half];
		    s += NB_THREADS_LOCAL;
		    }

		__syncthreads();

		n = half;
		half = n / 2;
		}
	    }

	template<typename T>
	__device__ static void reductionInterBlock(T* arraySM, T* resultGM)
	    {
	    const int THREAD_LOCAL_ID = Indice1D::tidLocal();

	    if (THREAD_LOCAL_ID == 0)
		{
		atomicAdd(resultGM, arraySM[0]);
		}
	    }
    };

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
